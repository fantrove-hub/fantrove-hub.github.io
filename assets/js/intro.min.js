// @ts-check
'use strict';

/**
 * @typedef {Object} IntroSystemConfig
 * @property {string} introShownKey - Key สำหรับเก็บสถานะการแสดง intro
 * @property {string} introExpirationKey - Key สำหรับเวลาหมดอายุ
 * @property {string} templateCacheKey - Key สำหรับ template cache
 * @property {string} containerId - ID ของ container
 * @property {number} introDuration - ระยะเวลาหมดอายุ (ms)
 * @property {string} templateFile - Path ของ template
 * @property {number} preloadTimeout - Timeout สำหรับ preload (ms)
 * @property {number} displayDuration - ระยะเวลาแสดง intro (ms)
 * @property {number} fadeOutDuration - ระยะเวลา fade out (ms)
 */

/** @type {IntroSystemConfig} */
const SYSTEM_CONFIG = Object.freeze({
  introShownKey: 'introShown',
  introExpirationKey: 'introExpiration',
  templateCacheKey: 'introTemplateCache',
  containerId: 'introContainer',
  introDuration: 2 * 60 * 60 * 1000, // 2 ชั่วโมง
  templateFile: '/assets/template-html/intro-template.html',
  preloadTimeout: 300,
  displayDuration: 1000, // 1 วินาที
  fadeOutDuration: 300 // 0.3 วินาที
});

/**
 * จัดการ Template และ Container
 */
class IntroTemplateManager {
  static instance = null;

  static getInstance() {
    if (!IntroTemplateManager.instance) {
      IntroTemplateManager.instance = new IntroTemplateManager();
    }
    return IntroTemplateManager.instance;
  }

  constructor() {
    this.templatePromise = null;
    this.cachedTemplate = null;
    this.container = null;
    this.isInitialized = false;
  }

  /**
   * ตรวจสอบความจำเป็นในการแสดง intro
   * @private
   * @returns {boolean}
   */
  shouldShowIntro() {
    const introShown = sessionStorage.getItem(SYSTEM_CONFIG.introShownKey);
    if (!introShown) return true;

    const expirationTime = parseInt(
      sessionStorage.getItem(SYSTEM_CONFIG.introExpirationKey) || '0'
    );
    return Date.now() > expirationTime;
  }

  /**
   * ลบ container ถ้าไม่จำเป็น
   * @private
   */
  removeContainerIfNotNeeded() {
    if (!this.shouldShowIntro()) {
      const existingContainer = document.getElementById(SYSTEM_CONFIG.containerId);
      if (existingContainer) {
        existingContainer.remove();
      }
      return true;
    }
    return false;
  }

  /**
   * สร้างหรือค้นหา container
   * @private
   * @returns {HTMLElement|null}
   */
  initializeContainer() {
    if (this.removeContainerIfNotNeeded()) {
      return null;
    }

    if (this.container) return this.container;

    let container = document.getElementById(SYSTEM_CONFIG.containerId);
    
    if (!container) {
      container = document.createElement('div');
      container.id = SYSTEM_CONFIG.containerId;
      container.classList.add('intro-container');
      document.body.appendChild(container);
    }

    // ตั้งค่าเริ่มต้นให้แสดงทันที
    container.style.display = 'flex';
    container.style.opacity = '1';
    container.style.visibility = 'visible';
    
    // Accessibility attributes
    container.setAttribute('role', 'dialog');
    container.setAttribute('aria-modal', 'true');
    container.setAttribute('aria-label', 'Welcome Introduction');

    this.container = container;
    return container;
  }

  /**
   * โหลด template
   * @private
   */
  async initializePreload() {
    if (!this.shouldShowIntro()) {
      return null;
    }

    const cachedTemplate = sessionStorage.getItem(SYSTEM_CONFIG.templateCacheKey);
    if (cachedTemplate) {
      this.cachedTemplate = cachedTemplate;
      return cachedTemplate;
    }

    this.templatePromise = new Promise((resolve, reject) => {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => {
        controller.abort();
        reject(new Error('Template preload timeout'));
      }, SYSTEM_CONFIG.preloadTimeout);

      fetch(SYSTEM_CONFIG.templateFile, {
        signal: controller.signal,
        headers: {
          'Accept': 'text/html',
          'Cache-Control': 'max-age=3600'
        }
      })
      .then(response => {
        if (!response.ok) throw new Error('Template fetch failed');
        return response.text();
      })
      .then(template => {
        clearTimeout(timeoutId);
        sessionStorage.setItem(SYSTEM_CONFIG.templateCacheKey, template);
        this.cachedTemplate = template;
        resolve(template);
      })
      .catch(error => {
        clearTimeout(timeoutId);
        reject(error);
      });
    });

    return this.templatePromise;
  }

  /**
   * เตรียม container และ template
   * @public
   * @returns {Promise<HTMLElement|null>}
   */
  async prepare() {
    if (!this.shouldShowIntro()) {
      this.removeContainerIfNotNeeded();
      return null;
    }

    if (this.isInitialized) {
      return this.container;
    }

    try {
      const container = this.initializeContainer();
      if (!container) return null;

      const template = await this.initializePreload();
      if (!template) return null;

      // ใส่ template และแสดงทันที
      container.innerHTML = template;
      container.style.display = 'flex';
      container.style.opacity = '1';
      container.style.visibility = 'visible';

      this.isInitialized = true;
      return container;
    } catch (error) {
      console.error('Failed to prepare intro:', error);
      this.cleanup();
      throw error;
    }
  }

  /**
   * แสดง container ทันที
   * @public
   */
  show() {
    if (!this.container || !this.shouldShowIntro()) return;
    
    // แสดงทันทีโดยไม่มี animation
    this.container.style.display = 'flex';
    this.container.style.opacity = '1';
    this.container.style.visibility = 'visible';
  }

  /**
   * ซ่อนและลบ container ด้วย fade out
   * @public
   */
  hide() {
    if (!this.container) return;

    // เริ่ม fade out
    this.container.classList.add('fade-out');

    // รอให้ animation เสร็จแล้วลบ
    setTimeout(() => {
      this.cleanup();
    }, SYSTEM_CONFIG.fadeOutDuration);
  }

  /**
   * ทำความสะอาดและลบ container
   * @private
   */
  cleanup() {
    if (this.container) {
      this.container.remove();
      this.container = null;
    }
    this.isInitialized = false;
    sessionStorage.removeItem(SYSTEM_CONFIG.templateCacheKey);
  }
}

/**
 * ระบบจัดการ Intro
 */
class IntroSystem {
  constructor() {
    this.templateManager = IntroTemplateManager.getInstance();
    this.initialized = false;
  }

  /**
   * บันทึกสถานะ
   * @private
   */
  saveState() {
    sessionStorage.setItem(SYSTEM_CONFIG.introShownKey, 'true');
    sessionStorage.setItem(
      SYSTEM_CONFIG.introExpirationKey,
      (Date.now() + SYSTEM_CONFIG.introDuration).toString()
    );
  }

  /**
   * เริ่มต้นระบบ
   * @public
   * @returns {Promise<void>}
   */
  async initialize() {
    try {
      const container = await this.templateManager.prepare();
      
      if (!container) {
        document.body.classList.remove('loading');
        return;
      }

      // บังคับให้ไม่เลื่อนหน้าเว็บ
      document.body.style.overflow = 'hidden';
      
      // แสดง intro ทันที
      this.templateManager.show();

      // ตั้งเวลาซ่อน intro
      setTimeout(() => {
        this.templateManager.hide();
        document.body.style.overflow = '';
      }, SYSTEM_CONFIG.displayDuration);

      this.saveState();
      this.initialized = true;
    } catch (error) {
      console.error('Intro initialization failed:', error);
      document.body.classList.remove('loading');
      throw error;
    }
  }
}

// เริ่มต้นระบบเมื่อ DOM พร้อม
document.addEventListener('DOMContentLoaded', () => {
  const system = new IntroSystem();
  system.initialize().catch(error => {
    console.error('System initialization failed:', error);
    document.body.classList.remove('loading');
  });
}, { passive: true });

// Error boundary
window.addEventListener('error', (event) => {
  console.error('Global error caught:', event.error);
  document.body.classList.remove('loading');
});

// Export สำหรับการทดสอบ
if (typeof module !== 'undefined' && module.exports) {
  module.exports = { IntroSystem, IntroTemplateManager, SYSTEM_CONFIG };
}