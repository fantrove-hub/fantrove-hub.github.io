document.addEventListener('DOMContentLoaded', () => {
 const LANGUAGES = {
  th: {
   backToTop: '↑'
  },
  en: {
   backToTop: '↑'
  }
 };
 
 const SETTINGS = {
  SCROLL_THRESHOLD: 120,
  FADE_DURATION: 300,
  INACTIVITY_TIMEOUT: 300,
  BOTTOM_OFFSET: 70,
  SAFE_ZONE: 120,
  SLOW_SCROLL_SPEED: 0.2,
  FAST_SCROLL_SPEED: 1.5,
  MIN_SCROLL_DELTA: 3,
  MIN_SLOW_SCROLL_DURATION: 300,
  VIBRATION_DURATION: 40
 };
 
 const state = {
  isButtonVisible: false,
  isAnimating: false,
  lastScrollY: 0,
  lastScrollTime: Date.now(),
  slowScrollStartTime: null,
  inactivityTimeout: null,
  delayTimeout: null
 };
 
 const createBackToTopButton = () => {
  const button = document.createElement('button');
  button.id = 'back-to-top';
  button.className = 'back-to-top hidden';
  button.textContent = getLocalizedText('backToTop');
  
  // เพิ่ม wave effect
  button.setAttribute('wave', '');
  
  // ป้องกันการ scroll/drag ระหว่างแตะปุ่ม (touch-action)
  button.style.touchAction = 'none';
  
  // ป้องกันการ scroll ขณะวางนิ้วบนปุ่มสำหรับ mobile
  button.addEventListener('touchmove', (e) => {
   e.preventDefault();
  }, { passive: false });
  
  button.addEventListener('click', () => {
   scrollToTop();
   triggerVibration();
  });
  
  document.body.appendChild(button);
  
  // upgradeElement ถ้ามี WakeEffect แล้ว
  if (window.WakeEffect && typeof window.WakeEffect.upgradeElement === 'function') {
   window.WakeEffect.upgradeElement(button);
  }
  
  applyStyles();
  return button;
 };
 
 const applyStyles = () => {
  const style = document.createElement('style');
  style.textContent = `
            #back-to-top {
                position: fixed;
                bottom: ${SETTINGS.BOTTOM_OFFSET}px;
                right: 5px;
                width: 40px;
                height: 40px;
                background: #13b47f;
                color: white;
                font-size: 1.7rem;
                font-weight: bold;
                border: none;
                border-radius: 50%;
                box-shadow: 0 0 5px rgba(58, 60, 79, 0.5);
                cursor: pointer;
                z-index: 1000;
                opacity: 0;
                visibility: hidden;
                transition: opacity ${SETTINGS.FADE_DURATION}ms ease, visibility ${SETTINGS.FADE_DURATION}ms ease;
                display: flex;
                align-items: center;
                justify-content: center;
                overflow: hidden;
                /* ป้องกัน scroll บนอุปกรณ์สัมผัส */
                touch-action: none;
                -ms-touch-action: none;
                user-select: none;
            }

            #back-to-top.visible {
                opacity: 1;
                visibility: visible;
            }

            #back-to-top.hidden {
                opacity: 0;
                visibility: hidden;
            }

            #back-to-top:focus {
                outline: none;
            }
        `;
  document.head.appendChild(style);
 };
 
 const getLocalizedText = (key) => {
  const lang = localStorage.getItem('selectedLang') || 'en';
  return LANGUAGES[lang]?.[key] || LANGUAGES['en'][key];
 };
 
 const scrollToTop = () => {
  window.scrollTo({ top: 0, behavior: 'smooth' });
 };
 
 const triggerVibration = () => {
  if ("vibrate" in navigator) {
   navigator.vibrate(SETTINGS.VIBRATION_DURATION);
  }
 };
 
 const calculateScrollSpeed = () => {
  const now = Date.now();
  const timeDiff = now - state.lastScrollTime;
  const scrollDiff = Math.abs(window.scrollY - state.lastScrollY);
  const speed = timeDiff > 0 ? scrollDiff / timeDiff : 0;
  
  state.lastScrollTime = now;
  return speed;
 };
 
 const handleScroll = () => {
  const scrollY = window.scrollY;
  const scrollSpeed = calculateScrollSpeed();
  
  clearTimeout(state.inactivityTimeout);
  clearTimeout(state.delayTimeout);
  
  if (scrollY <= SETTINGS.SAFE_ZONE) {
   hideButton();
   return;
  }
  
  if (scrollY < state.lastScrollY && scrollSpeed >= SETTINGS.FAST_SCROLL_SPEED) {
   showButton();
   state.slowScrollStartTime = null;
   return;
  }
  
  if (scrollY < state.lastScrollY && scrollSpeed < SETTINGS.SLOW_SCROLL_SPEED) {
   if (!state.slowScrollStartTime) {
    state.slowScrollStartTime = Date.now();
   }
   const slowScrollDuration = Date.now() - state.slowScrollStartTime;
   if (slowScrollDuration >= SETTINGS.MIN_SLOW_SCROLL_DURATION) {
    hideButton();
    return;
   }
  } else {
   state.slowScrollStartTime = null;
  }
  
  state.inactivityTimeout = setTimeout(() => {
   if (Math.abs(scrollY - state.lastScrollY) < 5 && scrollY > SETTINGS.SCROLL_THRESHOLD) {
    state.delayTimeout = setTimeout(() => {
     showButton();
    }, SETTINGS.INACTIVITY_TIMEOUT);
   }
  }, SETTINGS.INACTIVITY_TIMEOUT);
  
  if (scrollY > state.lastScrollY && (scrollY - state.lastScrollY) >= SETTINGS.MIN_SCROLL_DELTA) {
   hideButton();
  }
  
  state.lastScrollY = scrollY;
 };
 
 const showButton = () => {
  if (state.isButtonVisible || state.isAnimating) return;
  const button = document.getElementById('back-to-top');
  button.classList.remove('hidden');
  button.classList.add('visible');
  state.isButtonVisible = true;
 };
 
 const hideButton = () => {
  if (!state.isButtonVisible || state.isAnimating) return;
  const button = document.getElementById('back-to-top');
  button.classList.remove('visible');
  button.classList.add('hidden');
  state.isButtonVisible = false;
 };
 
 const setupLanguageChangeListener = () => {
  window.addEventListener('languageChange', () => {
   const button = document.getElementById('back-to-top');
   if (button) {
    button.textContent = getLocalizedText('backToTop');
   }
  });
 };
 
 const backToTopButton = createBackToTopButton();
 setupLanguageChangeListener();
 
 if (window.WakeEffect && typeof window.WakeEffect.upgradeAll === 'function') {
  window.WakeEffect.upgradeAll();
 } else {
  const checkWave = setInterval(() => {
   if (window.WakeEffect && typeof window.WakeEffect.upgradeElement === 'function') {
    window.WakeEffect.upgradeElement(backToTopButton);
    clearInterval(checkWave);
   }
  }, 200);
 }
 
 window.addEventListener('scroll', handleScroll, { passive: true });
});