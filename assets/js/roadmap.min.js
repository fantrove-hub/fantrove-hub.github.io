document.addEventListener("DOMContentLoaded", async function() {
 const DB_NAME = "FeatureDB";
 const DB_VERSION = 1;
 const STORE_NAME = "featureData";
 const STORAGE_KEY = "plan_data"; // ใช้ LocalStorage สำหรับเก็บแผน (plan) ที่เกี่ยวข้อง (ถ้ามี)
 const LANG_KEY = "selectedLang"; // ตัวแปรสำหรับเก็บค่าภาษา
 
 // ฟังก์ชันสำหรับดึงภาษาปัจจุบัน
 const getCurrentLang = () => localStorage.getItem(LANG_KEY) || 'en';
 
 // ข้อความแปลสำหรับแต่ละภาษา
 const translations = {
  featureStatus: {
   current: {
    th: 'คุณลักษณะนี้อยู่ในเวอร์ชันปัจจุบัน',
    en: 'This feature is in the current version',
   },
   upcoming: {
    th: 'คุณลักษณะนี้จะเพิ่มในเวอร์ชันถัดไป',
    en: 'This feature will be added in the next version',
   },
   version: {
    th: 'เวอร์ชัน',
    en: 'Version',
   }
  }
 };
 
 // ฟังก์ชันสำหรับเปิดหรือสร้าง IndexedDB
 function openDatabase() {
  return new Promise((resolve, reject) => {
   const request = indexedDB.open(DB_NAME, DB_VERSION);
   request.onupgradeneeded = function(event) {
    const db = event.target.result;
    if (!db.objectStoreNames.contains(STORE_NAME)) {
     // สร้าง object store ด้วย key path "id"
     db.createObjectStore(STORE_NAME, { keyPath: "id" });
    }
   };
   request.onsuccess = function(event) {
    resolve(event.target.result);
   };
   request.onerror = function(event) {
    reject(event.target.error);
   };
  });
 }
 
 // ฟังก์ชันสำหรับดึงข้อมูลจาก IndexedDB
 async function getFeatureDataFromDB() {
  const db = await openDatabase();
  return new Promise((resolve, reject) => {
   const transaction = db.transaction([STORE_NAME], "readonly");
   const store = transaction.objectStore(STORE_NAME);
   const getRequest = store.get("data");
   getRequest.onsuccess = function(event) {
    resolve(event.target.result ? event.target.result.data : null);
   };
   getRequest.onerror = function(event) {
    reject(event.target.error);
   };
  });
 }
 
 // ฟังก์ชันสำหรับบันทึกข้อมูลลง IndexedDB
 async function saveFeatureDataToDB(data) {
  const db = await openDatabase();
  return new Promise((resolve, reject) => {
   const transaction = db.transaction([STORE_NAME], "readwrite");
   const store = transaction.objectStore(STORE_NAME);
   const putRequest = store.put({ id: "data", data: data });
   putRequest.onsuccess = function() {
    resolve(true);
   };
   putRequest.onerror = function(event) {
    reject(event.target.error);
   };
  });
 }
 
 // ฟังก์ชันสำหรับแสดงผลข้อมูลคุณลักษณะ
 async function displayFeatures(currentStage, stages) {
  const featureList = document.getElementById('feature-list');
  const lang = getCurrentLang();
  
  // เคลียร์ข้อมูลเก่า
  featureList.innerHTML = '';
  
  stages.forEach(stage => {
   const stageNumber = stage.stage_number;
   const features = stage.features;
   
   features.forEach(item => {
    const li = document.createElement('li');
    
    // สร้าง feature text ตามภาษาที่เลือก
    const featureText = item.feature[lang] || item.feature.en; // ใช้ภาษาอังกฤษเป็น fallback
    li.textContent = `${featureText} - ${translations.featureStatus.version[lang]} ${stage.version}`;
    
    if (stageNumber < currentStage) {
     li.classList.add('past-feature');
    } else if (stageNumber === currentStage) {
     li.classList.add('new-feature');
     const smallText = document.createElement('small');
     smallText.textContent = translations.featureStatus.current[lang];
     li.appendChild(smallText);
    } else if (stageNumber === currentStage + 1) {
     li.classList.add('upcoming-feature');
     const smallText = document.createElement('small');
     smallText.textContent = translations.featureStatus.upcoming[lang];
     li.appendChild(smallText);
    } else {
     li.classList.add('not-feature');
     li.textContent = `??? - ${translations.featureStatus.version[lang]} ${stage.version}`;
    }
    
    // เพิ่ม data attributes สำหรับการอัพเดทภาษา
    Object.entries(item.feature).forEach(([langCode, text]) => {
     li.dataset[`feature${langCode.toUpperCase()}`] = text;
    });
    
    featureList.appendChild(li);
   });
  });
 }
 
 // ฟังก์ชันสำหรับแสดงข้อความผิดพลาด
 function showError(lang) {
  const errorMessages = {
   th: 'เกิดข้อผิดพลาดในการโหลดข้อมูล กรุณาลองใหม่อีกครั้ง',
   en: 'Error loading data. Please try again.',
  };
  alert(errorMessages[lang] || errorMessages.en);
 }
 
 // เริ่มต้น โดยดึงข้อมูลจาก IndexedDB หากมีอยู่แล้วให้แสดงผล
 try {
  const storedData = await getFeatureDataFromDB();
  if (storedData) {
   await displayFeatures(storedData.current_stage, storedData.stages);
  }
 } catch (error) {
  console.error('Error reading from IndexedDB:', error);
 }
 
 // ดึงข้อมูลล่าสุดจากไฟล์ JSON
 try {
  const response = await fetch('/assets/json/current-stage.min.json');
  const data = await response.json();
  
  // เปรียบเทียบข้อมูลจาก IndexedDB (ถ้ามี)
  let currentData;
  try {
   currentData = await getFeatureDataFromDB();
  } catch (error) {
   console.error('Error reading from IndexedDB:', error);
  }
  
  // ถ้าข้อมูลจาก JSON ใหม่แตกต่างจากข้อมูลที่เก็บไว้ใน IndexedDB หรือยังไม่มีข้อมูลใน DB
  if (!currentData || JSON.stringify(currentData) !== JSON.stringify(data)) {
   // บันทึกข้อมูลล่าสุดลง IndexedDB
   await saveFeatureDataToDB(data);
   await displayFeatures(data.current_stage, data.stages);
  }
 } catch (error) {
  console.error('Error loading stage data:', error);
  showError(getCurrentLang());
 }
 
 // กำหนด event listener สำหรับการเปลี่ยนภาษา
 window.addEventListener('languageChange', async (event) => {
  try {
   const data = await getFeatureDataFromDB();
   if (data) {
    await displayFeatures(data.current_stage, data.stages);
   }
  } catch (error) {
   console.error('Error reading from IndexedDB during language change:', error);
  }
 });
});