// main.js - รองรับการอ่านข้อมูล json โครงสร้างใหม่ (type array) และรองรับหลายภาษาแบบสเก��[...]
// นำระบบ Copy Notification ออกเป็นไฟล์แยก (copyNotification.js) และเรียกใช้ผ่าน global function

const viewAllConfigs = {
  emoji: {
    url: "/datum_verse/#?main=emojis-?page=1",
    labels: {
      th: "ดูทั้งหมด",
      en: "View All",
    }
  },
  symbol: {
    url: "/datum_verse/#?main=symbols-?page=1",
    labels: {
      th: "ดูทั้งหมด",
      en: "View All",
    }
  },
  // เพิ่มประเภทใหม่ที่นี่
};

// เลือกชื่อจาก multi-lang object ด้วยภาษาที่ต้องการ, รองรับสเกลภาษาใหม่
function pickLang(obj, langList) {
  if (typeof obj !== 'object' || obj === null) return obj;
  for (const lang of langList) {
    if (obj[lang]) return obj[lang];
  }
  // fallback เป็นภาษาแรกที่มี
  const keys = Object.keys(obj);
  if (keys.length > 0) return obj[keys[0]];
  return '';
}

// ได้รายชื่อภาษาที่มีในระบบ (สำหรับสเกล)
function getAllAvailableLangs(database) {
  const langs = new Set();
  if (!database || !Array.isArray(database.type)) return ['en'];
  database.type.forEach(typeObj => {
    if (typeof typeObj.name === 'object') Object.keys(typeObj.name).forEach(l => langs.add(l));
    (typeObj.category || []).forEach(cat => {
      if (typeof cat.name === 'object') Object.keys(cat.name).forEach(l => langs.add(l));
      (cat.data || []).forEach(item => {
        if (typeof item.name === 'object') Object.keys(item.name).forEach(l => langs.add(l));
        Object.entries(item).forEach(([k, v]) => {
          if (/_name$/.test(k) && typeof v === 'object') Object.keys(v).forEach(l => langs.add(l));
        });
      });
    });
  });
  return Array.from(langs);
}

function getLocalizedName(obj, langList = ['en']) {
  if (!obj) return '';
  // ใช้ pickLang multi-lang
  return pickLang(obj.name, langList) || '';
}

function getViewAllLabel(typeKey) {
  // typeKey = 'emoji', 'symbol', etc.
  const lang = localStorage.getItem('selectedLang') || 'en';
  if (
    viewAllConfigs[typeKey] &&
    viewAllConfigs[typeKey].labels &&
    viewAllConfigs[typeKey].labels[lang]
  ) {
    return viewAllConfigs[typeKey].labels[lang];
  }
  return (viewAllConfigs[typeKey] && viewAllConfigs[typeKey].labels && viewAllConfigs[typeKey].labels.en) || "View All";
}

function getViewAllUrl(typeKey) {
  return (viewAllConfigs[typeKey] && viewAllConfigs[typeKey].url) || "#";
}

// ฟังก์ชันสำหรับข้อความ error "ไม่สามารถโหลดข้อมูลได้" หลายภาษา
function getLoadDataErrorMessage() {
  const lang = localStorage.getItem('selectedLang') || 'en';
  const messages = {
    th: "ไม่สามารถโหลดข้อมูลได้",
    en: "Unable to load data",
    // เพิ่มภาษาอื่นได้ที่นี่
  };
  return messages[lang] || messages.en;
}

async function copyToClipboard(content) {
  try {
    await navigator.clipboard.writeText(content);
    return true;
  } catch (e) {
    return false;
  }
}

fetch('/assets/json/api-database.min.json')
  .then(res => res.json())
  .then(data => renderHomePage(data))
  .catch(() => {
    document.getElementById('app').innerHTML = `<p style="color:red">${getLoadDataErrorMessage()}</p>`;
  });

function renderHomePage(database) {
  const app = document.getElementById('app');
  app.innerHTML = '';
  
  // รองรับโครงสร้างใหม่ (database.type: Array)
  if (!database.type || !Array.isArray(database.type)) {
    app.innerHTML = `<p style="color:red">${getLoadDataErrorMessage()} (invalid data)</p>`;
    return;
  }
  
  // ดึงภาษาที่เลือกไว้
  const userLang = localStorage.getItem('selectedLang') || 'en';
  const langList = [userLang, 'en'];
  
  database.type.forEach(typeObj => {
    // key สำหรับปุ่ม view all
    const typeKey = (pickLang(typeObj.name, ['en']) || '').toLowerCase();
    
    const categories = (typeObj.category || []).slice(0, 4);
    const mainDiv = document.createElement('div');
    mainDiv.className = 'main';
    
    // Header + ปุ่มดูทั้งหมด
    const header = document.createElement('div');
    header.className = 'text-h';
    const h1 = document.createElement('h1');
    h1.textContent = pickLang(typeObj.name, langList) || typeKey;
    header.appendChild(h1);
    
    const viewAllBtn = document.createElement('button');
    viewAllBtn.textContent = getViewAllLabel(typeKey);
    // ปรับปรุง: เปิด URL ในหน้าปัจจุบัน (แทนการเปิดแท็บใหม่)
    viewAllBtn.onclick = () => {
      const url = getViewAllUrl(typeKey);
      window.location.href = url;
    };
    header.appendChild(viewAllBtn);
    
    mainDiv.appendChild(header);
    
    categories.forEach(category => {
      const catSection = document.createElement('div');
      catSection.className = 'category-section';
      const h2 = document.createElement('h2');
      h2.textContent = pickLang(category.name, langList) || '';
      catSection.appendChild(h2);
      
      const contentDiv = document.createElement('div');
      contentDiv.className = 'content';
      
      // Carousel container (ไม่มีปุ่มเลื่อนแล้ว)
      const carouselContainer = document.createElement('div');
      carouselContainer.className = 'carousel-container';
      
      // Track
      const track = document.createElement('div');
      track.className = 'carousel-track';
      
      (category.data || []).forEach(item => {
        const card = document.createElement('div');
        card.className = 'item-card';
        
        const emoji = document.createElement('div');
        emoji.className = 'emoji';
        emoji.textContent = item.text || '';
        
        const name = document.createElement('div');
        name.className = 'name';
        const itemName = pickLang(item.name, langList) || item.api || '';
        name.textContent = itemName;
        
        card.appendChild(emoji);
        card.appendChild(name);
        
        // คลิกที่ card -> คัดลอก emoji/symbol พร้อมแสดง Notification
        card.style.cursor = 'pointer';
        card.title = getViewAllLabel('emoji'); // หรือจะใช้แปลภาษา 'คัดลอก' ก็ได้
        card.onclick = async () => {
          const copyText = item.text || '';
          if (await copyToClipboard(copyText)) {
            // เรียกใช้ showCopyNotification จาก global (copyNotification.js ต้องถูกโหลดก่อน)
            if (typeof window.showCopyNotification === 'function') {
              window.showCopyNotification({
                text: copyText,
                name: itemName,
                type: typeKey // 'emoji', 'symbol', etc.
              });
            }
          }
        };
        
        track.appendChild(card);
      });
      
      carouselContainer.appendChild(track);
      contentDiv.appendChild(carouselContainer);
      catSection.appendChild(contentDiv);
      mainDiv.appendChild(catSection);
    });
    
    app.appendChild(mainDiv);
  });
}

// ตัวอย่าง: กรณีเปลี่ยนภาษา (optional หากมีระบบเปลี่ยนภาษาในเว็บ)
// window.addEventListener('languageChange', () => {
//   fetch('assets/json/api-database.json')
//     .then(res => res.json())
//     .then(data => renderHomePage(data));
// });